clc; clear; close all; 

%% Includes 
addpath("functions\"); 
addpath("Models\"); 
addpath("Models\capacitors\"); 
addpath("Models\capacitors\functions\"); 
addpath("Models\diods\"); 
addpath("Models\diods\functions\"); 
addpath("Models\resistors\"); 
addpath("Models\resistors\functions\"); 
addpath("Models\transistors\");   
addpath("Models\transistors\functions\"); 

%%  
FilenameSystem.Capacitors = 'table_reliability_capacitor.xlsx'; 
FilenameSystem.Diods = 'table_reliability_diod.xlsx'; 
FilenameSystem.Resistors = 'table_reliability_resistor.xlsx'; 
FilenameSystem.Transistors = 'table_reliability_transistor.xlsx'; 

% Предварительная загрузка данных
[DataSystem] = getTableSystemData(FilenameSystem);

opts_ps = optimoptions('paretosearch','Display','off','PlotFcn',{'psplotparetof' 'psplotparetox'}); 
rng default % For reproducibility 

lb = [0.01 0.01]; 
ub = [1e4 1e4]; 

fun = @(x) objval(x, DataSystem);  % Передайте DataSystem
nlcon = @nonlcon; 

[x_ps1,fval_ps1,~,psoutput1] = paretosearch(fun,2,[],[],[],[],lb,ub,nlcon,opts_ps);
x_ps1
fval_ps1
disp("Total Function Count: " + psoutput1.funccount); 
%% 
% Генерация случайных точек для неоптимальных решений
num_random_points = 100; % количество случайных точек
random_points = 0.001 + (10 - 0.001) .* rand(num_random_points, 2);

% Инициализация матрицы для неоптимальных значений
random_fvals = zeros(num_random_points, 2);

% Используем цикл для вычисления значения функций для каждой случайной точки
for i = 1:num_random_points
    random_fvals(i, :) = objval(random_points(i, :), DataSystem);
end

% Подготовка к графику
figure;
hold on;

% Рисуем Pareto-оптимальные решения
plot(fval_ps1(:, 1), fval_ps1(:, 2), 'bo', 'MarkerSize', 8, 'DisplayName', 'Оптимальные решения');

% Рисуем неоптимальные решения
plot(random_fvals(:, 1), random_fvals(:, 2), 'ro', 'MarkerSize', 4, 'DisplayName', 'Неоптимальные решения');

legend('Location', 'best');
xlabel('Objective 1');
ylabel('Objective 2');
title('Pareto Front with Non-optimal Solutions');
grid on;
hold off;

function [Cineq,Ceq] = nonlcon(x) 
Cineq = []; 
Ceq = []; 
end 

function F = objval(x, DataSystem) % Добавлен аргумент DataSystem
% Параметры могут быть вынесены как константы
t = 30; 
capacity = 1000; 
U_ratio = 1/2; 
iRelative = 1/2; 
power_b = 0.5; 
resistance_b = 200; 
P_ratio_b = 1/2; 
power_k = 0.5; 
resistance_k = 200; 
P_ratio_k = 1/2; 
pRelative = 1/2; 
s1 = 1/2; 
goalfreq = 1000;

f1 = abs(goalfreq - 1 ./ (log(2) * (2 * x(1) .* x(2)))); 
f2 = getReliabilitySystemFromData(DataSystem, 1, 1, 1, 1, 1, t, x(1), U_ratio, iRelative, power_b, resistance_b, P_ratio_b, power_k, x(2), P_ratio_k, pRelative, s1); 

F = [f1, f2]; 
end 
